패턴
	어댑터 패턴
	팩토리 패턴
	싱글톤 패턴

예외처리
	에러 : 심각한 오류
	예외 : 덜 심각한 오류

try ~ catch ~ finally
	try{
		예외가 발생할 수 있는 문장
		...
	}catch(예외클래스명 객체명){
		예외 발생시 실행할 문장
	}finally{
		예외 발생 여부와 상관없이 실행할 문장
	}

Exception 클래스
	모든 예외클래스들의 부모클래스

throws
	예외 떠넘기기
	메소드 선언부 내부에서 발생하는 예외를 무시하고 호출하는 곳으로 떠넘기는 문법
	호출하는 곳에서 예외가 발생하기 때문에 try ~ catch로 잡아주어야 한다.

	리턴타입 메소드명() trhows 예외1, 예외2, ...{
		예외1, 예외2, ... 무시하는 구역
	}

	- 직접 예외를 발생시켜야할 때 (이건 쓸일 잘 없음)
	- 예외처리를 메소드 내부가 아닌 호출부에서 해주어야 할 때
	- 프로그램의 진행을 방해하지 않는 전제조건 하에 try ~ catch로 매번 묶기 귀찮을 때

API(Application Programming Interface)
	자바 시스템을 제어하기 위해서 자바에서 제공하는 명령어들을 의미한다.
	선배 개발자들이 JAVA에서 코딩을 쉽게 할 수 있도록 미리 만들어 놓은 것들
	API의 종류는 굉장히 많고 다양하기 때문에 모두 외우는 것은 절대 불가능하다.
	그렇기 때문에 처음 보는 API라도 설명과 이름, 매개변수 등을 잘 읽고
	맞는 목적으로 알맞게 사용하는 방법을 알아야 한다.

Object 클래스
	모든 클래스들의 최상위 클래스

	toString() : 객체 출력시 나올 문자열을 정의 (객체에 대해 설명하는 문자열)
	hashCode() : 해쉬값(주소값을 특정 연산을 거치게 한 후 나온 int 값)을 리턴
		객체를 대표하는 정수값
	equals() 	: 객체가 가지고 있는 두 주소값이 같은지 확인하는 메소드
	== 	: 객체가 가지고 있는 두 주소값이 같은지 확인하는 연산자
	
	=> equals, == 둘다 같은데 들어가보면 equals 는 재정의가 되어있어서 위 두개의
	결과값이 다르게 나온다.

	우리가 만든 클래스에서는 주소값(해쉬값)이 아닌 다른 값들을 활용할 수 있도록
	재정의 하는 능력이 필요하다.