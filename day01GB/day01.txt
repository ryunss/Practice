day01GB "GB 220929 day01"-------------------------------------------------
■ { }
	영역, 바디, 블럭, ...
	해당하는 클래스, 메소드 등의 영역을 나타낸다.
	
	* 현재 그것을 선언중임을 나타낸다.
	public class Test{
		public static void main(String[] args){
			
		}
	}	
	
모든 것은 입력 -> 처리 -> 출력 과정을 거치게 된다.

■ 출력
	개발자가 사용자에게 값(데이터)을 보내어 표현해주는 행위 (소리, 영상 등..)
	
■ 출력메소드
	System.out.println();
		: 마지막에 줄바꿈을 해준다.
	System.out.print();
		: 마지막에 줄바꿈을 안해준다.
		
		* 제어문자
		\n : 개행문자(Enter)
		\t : Tab 
		\" : " 출력할 때 
		\' : ' 출력할 때 
		\\ : \ 출력할 때
	System.out.printf("서식문자열", 값);
		서식문자열 : 서식문자가 들어간 문자열
		값 : 뒤의 값들은 앞의 서식문자와 매칭되게 작성해준다.
		
		* 서식문자
			%d : 10진수정수
			%x : 16진수정수
			%o : 8진수정수
			%f : 실수
			%c : 문자
			%s : 문자열
			%% : % 출력

■ main 메소드 : 프로그램의 시작점, 진입점

■ 값
	데이터, 상수, 리터럴

■ 변수
	값을 담는 저장공간

■ = (대입연산자)
	오른쪽에 있는 값을 왼쪽의 공간에 넣어라
﻿
■ 변수 선언시 RAM
	int data = 10;

	data 라는 이름의 저장공간이 RAM에 할당되고, 10이라는 값이 들어간다.
	공간이 만들어졌으므로 주소값이 부여되지만 알 수 없다.
﻿
■ 변수 선언 시 주의사항
	같은 구역에 같은 이름의 변수를 선언할 수 없다.
	초기화를 해준다.
	되도록 선언부(메소드 상단)에 한꺼번에 선언한다.

■ 변수명 주의사항
	숫자는 맨 앞에 쓸 수 없다. (1num X)
	예약어(키워드)는 쓸 수 없다 (for, class, int, ...)
	특수문자는 쓸 수 없다.
	공백을 쓸 수 없다. ( _ 언더바는 사용가능)
	되도록 소문자로 사용한다. (시작은 무조건 소문자로! 클래스때문에 구별할려고)
	되도록 한글은 사용하지 않는다.
	뜻이 있는 명사형 단어를 사용한다

■ 변수의 사용
	변수명을 그대로 사용한다.
	int data = 10;
	data = 5; // data <- 공간
	System.out.println(data); // data <- 값
	data = data + 10; // 왼쪽 data 는 공간, 오른쪽 data 는 값

■ 변수의 사용 이유
	1. 반복되는 같은 의미의 값을 쉽게 관리하기 위해서
	2. 값에 의미부여를 하기 위해서

■ . (하위 연산자)
	A.b : A 안의 b, A의 b

■ 입력
	사용자가 개발자에게 자신이 알고 있는 데이터를 넘겨주는 행위

■ 입력상태
	커서가 깜빡이면서 값이 들어오기를 기다리는 상태
	값이 입력되지 않으면 다음으로 진행이 불가하다.

	개발자가 할 수 있는 일은 사용자에게 입력상태로 만들어 주는 것 까지이다.
	아래 코드들은 사용자가 값을 입력했다고 가정하고 작성한다.
	입력 받기 전 사용자가 잘 입력할 수 있도록 먼저 출력해준다.

■ 입력메소드
	Scanner sc = new Scanner(System.in);	

	sc.next();
	- 사용 부분 통째로 사용자가 입력한 문자열 값
	- 공백 또는 엔터를 구분점으로 판단하고 분리하여 입력받는다.
	- 서울시 강남구 : "서울시", "강남구" 로 분리하여 "서울시"만 입력받는다.
	sc.nextLine();
	- 사용부분 통째로 사용자가 입력한 문자열 값
	- 공백도 문자로 입력받는다.
 	- 앞에 다른 입력이 있다면 의미없는 nextLine()을 하나 미리 써주어야한다.
	sc.nextInt();
	- 사용부분 통째로 사용자가 입력한 정수 값

	