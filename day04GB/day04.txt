2차원배열
	배열 안에 배열

2차원 배열 선언
	자료형[ ][ ] 배열명 = { 
		{값1, 값2, ... },
		{값3, 값4, ... },
		...
	}

	자료형[ ][ ] 배열명 = new 자료형[행][열]

	정방배열 : 각 행마다 열의 개수가 모두 같은 배열
	비정방배열 : 각 행마다 열의 개수가 다른 배열

2중 for문, 다중 for문(nested for문, 중첩 for문)
	for문 안에 for문이 있는 형태
	바깥쪽에 있는 i for문은 다음 반복으로 넘어가기 위해서
	안쪽에 있는 수행할 문장들을 모두 마쳐야 한다.
	안쪽에 있는 수행할 문장 중에 j for문이 있으므로, 그 j for문이
	모두 완료되어야 i for문 입장에서는 내부의 수행할 문장들을
	마친 것이 된다. 따라서 가장 안쪽에 있는 문장은 
	( i for문의 반복횟수) * (j for문의 반복횟수) 만큼 수행된다.

	i	j
	0	0 1 2
	1	0 1 2

메소드
	이름 뒤에 소괄호
	단, 키워드 뒤의 ( )는 메소드가 아니다.
	반복되는 코드, 기능, 행위, 처리 등을 쉽게 관리하기 위해 선언되어 있는 블럭
	반복이 규칙적이지 않고 우리가 원할 때 특정 코드를 수행하게 하고 싶을 때
	메소드로 선언해놓고 후에 호출해서 사용한다.
	소스코드 간결화를 위해 사용한다.
	
	f	(x)	=	2x+1
	메소드	매개변수		리턴값
	이름

메소드 구조
	①리턴타입 ②메소드명(③자료형 매개변수1, 자료형 매개변수2, ...){
		④호출 시 실행할 문장
		⑤return 리턴값;
	}

	① return 뒤의 값의 타입에 맞는 자료형을 작성해준다. 리턴 값이 없는 경우에는 void로 작성한다.
	② 동사형으로 작성한다. (eat(연어회) , eat(파스타), eat(피자), eat(초밥))
	③ 생략이 가능하다. 하지만 생략시에는 외부(호출하는 곳)에서 값을 전달받을 수 없다.
	여러 값을 전달받아야 할 경우에는 ,(콤마)로 구분하여 그 값들만큼 선언해주어야 한다.
	호출시에는 매개변수(인자)의 타입과 개수에 맞게 순서대로 값들(인수)을 전달해주어야 한다.
	④ 생략이 가능하다. 메소드 호출 때마다 수행해야 하는 코드를 그대로 작성한다.
	⑤ 생략이 가능하다. 

return
	return 키워드를 만나는 순간 메소드 내부의 진행을 멈추고 호출했던 부분으로 다시 돌아간다.
	만약 return 키워드 뒤에 값이 작성되어 있다면 호출한 부분에 그 뒤의 값을 덮어 씌우며 돌아간다
	(메소드 호출부분을 통째로 값으로 봐야한다.)

return을 사용해야할 때
	메소드 내부에서 모든 기능이 구현되지 않을 때
	호출하는 부분에서 아직 할 작업이 남았을 때
	메소드 기능의 결과를(처리 결과를) 호출하는 부분에 알려주어야 할 때

return을 사용하지 않을 때
	메소드 내에서 모든 기능이 구현될 때
	
메소드 사용
	메소드는 클래스 내부에 있으므로 그 메소드 속해있는 클래스 타입으로
	먼저 변수를 만들어 주어야 한다. (객체화를 진행해주어야 한다)

	클래스명 변수명 = new 클래스명();
	
	변수.메소드명();		매개변수가 없는 것은 그대로 이름으로 호출한다.
	변수.메소드명(값1, 값2, ...);	매개변수의 개수와 타입에 맞게 값을 넘겨주며 호출한다.

	메소드 호출 부분은 선언부 마지막에 return 값이 있다면 호출한 부분 통째로 그 retrun 값으로 봐야한다.
	단, return 값이 없다면 절대 값으로 봐서는 안된다.

메소드 선언 순서
	(두 정수의 덧셈 메소드)
	
	1. 메소드 명을 생각한다.
		void add(){
		
		}
	2. 매개변수를 생각한다.
		void add(int num1, int num2){
			
		}
	3. 실행할 문장을 생각한다.
		void add(int num1, int num2){
			syso(num1+"와(과)"+num2+"의 합을 구하는 메소드");
			int result = num1+num2;	
		}
	4. 리턴값을 생각한다.
		void add(int num1, int num2){
			syso(num1+"와(과)"+num2+"의 합을 구하는 메소드");
			int result = num1+num2;
			return result;
		}
	5. 리턴 타입을 수정한다.
		int add(int num1, int num2){
			syso(num1+"와(과)"+num2+"의 합을 구하는 메소드");
			int result = num1+num2;
			return result;
		}