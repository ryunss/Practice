클래스
	여러 변수들과 메소드들을 둘 다 묶어서 관리하기 위해 설계하고 사용한다.
	공통적인 요소들을 추상적으로 묶어놓은 틀

	1. 주어이다.
	- System.out.println();
	- 모든 문장 맨 앞에는 클래스가 나오고 영어는 맨 앞을 항상 대문자로 적는다.
	- 따라서 클래스는 주어의 역할을 하고, 대문자로 시작한다.

	String food = "banana";
	Monkey.eat(food);	
	[주어]  [동사][목적어]

	2. 타입이다.
	- 클래스는 추상적인 개념이고 이 클래스 안에는 필드가 존재한다.
	- 추상적인 것을 바로 사용할 수 없기 때문에 그 필드들을 가진
	구체화 시킨 대상이 필요핟. 이러한 것들을 "객체"라고 부른다.
	영어로는 instance variable 이라고 부른다.

	instance 예, 예시라는 뜻이고 추상적인 개념의 한 예시로서
	객체가 나오기 때문에 instance variable 이라 부른다.
	(자동차인데 예를 들어 내 차 말이야)
	[클래스]		   [객체]

	클래스명 객체명;

	따라서 클래스는 이 때 만들어지는 객체의 타입이다.

클래스 선언
	다른 클래스 외부에서 선언한다.
	class 클래스명 {
		필드 선언(변수, 메소드)
	}

클래스 사용
	클래스는 추상적인 틀이기 때문에 먼저 객체화를 진행한다.
	클래스명 객체명 = new 클래스명();
	객체.메소드()
	객체.변수

	하나의 저장공간에는 단 한개의 값만 담을 수 있다.
	필드에는 여러개의 값이 존재하기 때문에 필드는 다른곳에 할당되고
	할당된 필드의 주소값을 저장하는 것이 객체이다.

생성자
	클래스명 뒤에 소괄호
	생성자는 메소드와 똑같은 기능을 가지고 있다.

	하지만 new 라는 키워드와 함께 쓰이며 객체를 생성해주고
	리턴을 할 수 없기 때문에 메소드라고 부르지 않는다.
	
	클래스를 선언하면 기본적으로 생성자 하나를 만들어주고 우리눈에는 보이지 않는다
	이런 생성자를 기본 생성자라고 하며, 만약 직접 생성자를 선언하게 되면
	기존에 있던 기본 생성자는 사라지게 된다.

생성자의 목적
	1. 클래스의 필드를 똑같이 복사해서 메모리에 할당해주고, 할당된 필드의 주소값을 돌려받기 위함.
	(객체화의 목적)

	2. 호출 시 내부의 내용을 수행하기 위함
	(초기화의 목적)

this
	클래스 선언시 내부적으로 선언되어 생성된다.
	클래스 영역에서 한번의 메소드 선언으로 여러 객체를 다루어야 한다.
	만약 메소드 내에서 필드를 사용하고자 할 때 어떤 객체의 필드인지를 알 수 없다
	따라서 객체에 마침표를 찍고 필드에 접근하거나 어떤 객체를 생성중에는 그 접근한 객체를
	this 라는 변수가 받는다.
	결과적으로 클래스 선언 시 내부에서 this.필드명으로 접근하면
	여러 객체를 하나의 메소드에서 구분하여 다룰 수 있게 된다. (객체 구별용 변수)

Polymorphism(다형성)
	1. Overloading(오버로딩)
	- 같은 이름의 메소드를 넘쳐서 여러개 불러오는(선언하는) 기법
	- 매개변수의 개수 or 타입 or 순서가 다르다면 매개변수로 각각의 메소드들을
	구별할 수 있기 때문에 같은 이름의 메소드로 여러개 선언할 수 있다.
	오버로딩된 메소드를 호출할 시 전달된 값의 타입 or 개수 or 순서로
	구분하여 알맞은 메소드가 자동으로 호출된다.
