추상 클래스 (불완전한 클래스)
	추상적인 내용만 정의하고 있는 클래스로, 구체적인 내용은 존재하지 않는 클래스
	기존의 클래스들은 만들어지는 객체들이 전부 같은 동작을 하도록 메소드의 내용이
	선언되어 있으므로 메소드는 추상화 진행이 되지 않았다.
	추상클래스는 메소드의 내용을 선언하지 않고 상속받은 하위 클래스에서 
	그 내용들을 구현하도록 설계된 클래스이다.
	추상 클래스(부모)는 클래스들(자식)의 공통요소들을 추상적으로 가상화 시켜놓기 때문에
	객체화시 자식에서 재정의를 통한 구현을 하고 그 자식 타입으로 객체화를 진행해서 사용한다.
	부모 추상 클래스의 역할은 단지 자식 클래스를 만들 때 틀로 존재해서 도와주는 역할을 수행.
	그렇기 때문에 자식 클래스에서 재저의 해야하는 메소드의 이름과 형태만 가지고 있다.
	즉 메소드에 { } (바디)가 없다.
	이러한 메소드를 추상 메소드라고 하며, abstract 라는 키워드가 리턴타입 앞에 붙는다.
	추상 메소드가 하나라도 포함되어 있다면 그 클래스는 추상 클래스로 선언해야 한다.
	
추상 클래스 선언
	abstract class 클래스명{
		abstract 리턴타입 추상메소드명();
	}	
	추상 메소드는 자식 클래스에서 강제적으로 반드시 재정의 해야한다.
	일반 메소드도 추상 클래스 내부에 존재할 수 있다.

인터페이스
	추상 클래스를 고도화 시킨 문법이며, 반드시 추상메소드와 상수만 선언해야한다.
	다른 클래스에서 인터페이스를 상속받을 때는 implements 라는 키워드를 사용한다.
	상속받은 클래스는 인터페이스가 가지고 있는 추상 메소드를 반드시 재정의 해야한다.
	
	jdk 8버전 이후로부터는 인터페이스에 default 메소드를 선언할 수 있다.
	따라서 사실상의 다중상속을 지원하게 된다. 인터페이스들 끼리나 다른 클래스와의
	메소드 모호성이 발생한다면 (같은 이름의 메소드들 끼리 충돌이 발생한다면)
	상속받은 클래스에서 명시적으로 작성(오버라이딩)해서 모호성을 해결해주어야한다.
	내부에서는
		인터페이스명.super.메소드()
	로 상속받은 인터페이스에 있는 메소드를 호출할 수 있고, 이는 다중상속을 받을 수
	있다는 것을 의미한다.