Thread(쓰레드)

프로그램
	컴퓨터가 해야 할 행위들을 소스코드를 통해 만들어낸 대본

프로세스
	실행된 프로그램
	운영체제로부터 시스템 자원을 할당받는 작업의 단위

쓰레드
	프로세스의 특정한 수행 경로
	프로세스의 처리 경로
	프로그램의 흐름
	
멀티쓰레드
	하나의 프로세스를 동시에 처리하는 것처럼 보이지만
	사실은 매우 짧은 단위로 분할해서 차례대로 처리한다.
	여러개의 처리 경로를 가질 수 있게 한다.
	한개의 처리경로를 여러개로 나누어 동시 작업이 가능해진다.
	웹 서버 프로그램(JSP)이 대표적인 멀티쓰레드 응용 프로그램이다.

장점
	효율성 증가
	처리량 증가
	처리비용 감소

단점
	복잡하고 설계가 어려움
	자원의 공유문제
	교착상태(Deadlock)

교착상태
	멀티 쓰레드 중 쓰레드간의 대기 상태가 종료되지 않아서
	무한정 대기만 하는 비정상적인 상태
	해결방법 : 조건문을 통해 교착상태를 판단하고 다시 깨워준다.

쓰레드 생성
	1. Thread 클래스 상속
	2. Runnable 인터페이스 상속 후 Thread 객체에 넘겨주기


동기화(synchronized)
	하나의 쓰레드가 실행 중일 때 다른 쓰레드가 같은 필드에 동시에 접근하지
	못하도록 막는 것
	=> 두개의 작업을 동시에 못하도록 막는 것
	=> 은행 떠올리면 될듯.

파일 입출력
	Writer(입력)
		FileWriter > BufferedWriter > 파일에 입력

	FileWriter : 경로에 있는 파일을 가져오기(쓰기 위해)
	* 파일이 없는 경우에는 그 이름대로 파일을 생성해준다.
	* 하지만 경로가 이상한 경우에는(폴더의 위치가 잘못된 폴더인 경우)
	폴더를 생성해주지는 않고, 예외를 발생시킨다. 그래서 예외처리 해야한다.

	new FileWriter("파일경로"); : 덮어쓰기 모드
	new FileWriter("파일경로", true); : 추가하기 모드

	BufferedWriter : 버퍼를 이용해서 파일 작성

	bw.write("문자열") : 버퍼에 문자열 쓰기
	bw.close() : 실제 파일에 적용
		버퍼에 있는 데이터들을 파일에 써주면서 버퍼 닫기

	Reader(출력)
		FileReader > BufferedReader > 파일에서 출력

		FileReader : 경로에 있는 파일을 가져오기(읽기 위해)
		* 파일이 존재하지 않으면 예외 발생

		BufferedReader : 버퍼를 이용해서 파일 읽기

		br.readLine() : 파일에 있는 내용을 한줄 이동하며 읽어오기(return String)